openapi: 3.0.3
info:
  title: Voting App API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/
  - url: http://localhost:8080/
paths:
  /quiz:
    post:
      summary: Create a new quiz
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '201':
          description: Quiz created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
  /quiz/{quizId}:
    get:
      summary: Get a specific quiz by id
      parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Returns a specific quiz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
    put:
      summary: Update quiz
      parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '200':
          description: Quiz successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        '400':
          description: Invalid quiz supplied
        '404':
          description: Quiz not found
    delete:
      summary: Delete quiz
      parameters:
      - name: quizId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Quiz successfully deleted
        '404':
          description: Quiz not found
  /quiz/{id}/generatePin:
    post:
      summary: Generate a PIN for a quiz session
      parameters:
        - in: path
          name: id
          description: ID of the quiz
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pin:
                    type: string
                    example: ABC123
        '404':
          description: Quiz not found
        '500':
          description: Internal server error
  /quiz/paginated:
    get:
      summary: Get a paginated list of quizzes
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns a paginated list of quizzes
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Quiz'
  /quiz/pagesCount:
    get:
      summary: Get total number of pages
      responses:
        '200':
          description: Total number of pages
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberOfPages:
                    type: integer
                    format: int64
  /user:
    post:
      summary: Create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The user was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      summary: Get a specific user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: The requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a specific user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a specific user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: The user was successfully deleted
  /user/pagesCount:
    get:
      summary: Get total number of pages
      operationId: getTotalNumberOfUserPages
      responses:
        '200':
          description: Number of pages
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberOfPages:
                    type: integer
                    format: int64
  /user/paginated:
    get:
      summary: Get a paginated list of users
      operationId: listPaginatedUsers
      parameters:
        - name: page
          in: query
          description: The page number to fetch
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paginated list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /authentication/login:
    post:
      summary: Attempt to log in as admin
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginData'
      responses:
        '200':
          description: 'Login successful'
        '401':
          description: 'Login failed'
  /authentication/logout:
    post:
      summary: Log out
      responses:
        '200':
          description: Successfully logged out
components:
  schemas:
    LoginData:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: password
    Quiz:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'Quiz 1'
        description:
          type: string
          example: 'This is a quiz'
        questionOrder:
          type: integer
          format: int64
          example: 1
        thumbnail:
          type: string
          example: 'https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        text:
          type: string
          example: 'What is the capital of France?'
        time:
          type: integer
          format: int32
          example: 10
        points:
          type: integer
          format: int32
          example: 10
        answers:
          type: array
          items:
              $ref: '#/components/schemas/Answer'
    Answer:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          text:
            type: string
            example: 'Paris'
          correct:
            type: boolean
            example: true
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [ADMIN, MODERATOR]